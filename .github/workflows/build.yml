name: Build

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build Executables
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, windows-2022, ubuntu-22.04-arm]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Libraries (Linux only)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev \
        libxcb-shape0-dev \
        libxcb-image0-dev \
        libxkbcommon-x11-0 \
        libxcb-icccm4-dev \
        libxcb-xkb-dev \
        libxcb-render-util0-dev \
        libxcb-keysyms1-dev \
        libxcb-cursor-dev

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        # pip install pyinstaller
#        pip install -r src/requirements.txt

#    - name: Build Executable
#      run: |
#        pyinstaller --onefile --name "MiniDexed Service Utility" --add-data "src/midi_commands:midi_commands" --add-data "src/data:data" --add-data "src/images:images" --hidden-import mido.backends.rtmidi --hidden-import rtmidi 'src/MiniDexed Service Utility.py' --noconsole
#      env:
#        PYINSTALLER_STRIP: 1
#        PYINSTALLER_UPX: 1

#    - name: Upload Artifact
#      uses: actions/upload-artifact@v4
#      with:
#        name: ${{ runner.os }}-executable
#        path: |
#          dist/*.exe
#          dist/*
#        retention-days: 1

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka
        pip install -r src/requirements.txt

    - name: Build Executable (Nuitka)
      run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            # python -m nuitka --prefer-source-code --windows-console-mode=attach --assume-yes-for-downloads --include-package=rtmidi --include-package=mido.backends.rtmidi --standalone --output-dir=dist_nuitka --include-data-dir=src/midi_commands=midi_commands --include-data-dir=src/data=data --include-data-dir=src/images=images --enable-plugin=pyside6 --follow-imports --macos-create-app-bundle 'src/MiniDexed Service Utility.py'
            python -m nuitka --prefer-source-code --assume-yes-for-downloads --follow-imports --macos-create-app-bundle 'src/zeroconftest.py' --output-dir=dist_nuitka
          else
            # python -m nuitka --prefer-source-code --windows-console-mode=attach --assume-yes-for-downloads --include-package=rtmidi --include-package=mido.backends.rtmidi --standalone --output-dir=dist_nuitka --include-data-dir=src/midi_commands=midi_commands --include-data-dir=src/data=data --include-data-dir=src/images=images --enable-plugin=pyside6 --follow-imports --onefile 'src/MiniDexed Service Utility.py'
            python -m nuitka --prefer-source-code --assume-yes-for-downloads --follow-imports 'src/zeroconftest.py' --output-dir=dist_nuitka
          fi
          # rm -rf dist_nuitka/*build
          # rm -rf dist_nuitka/*dist
      env:
          PYTHONOPTIMIZE: 2
      shell: bash   

    - name: Upload Nuitka Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }}-${{ runner.arch }}
        path: |
          dist_nuitka/*
        retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Executable
      uses: actions/download-artifact@v4
      with:
        path: ./executables/
        # merge-multiple: true

    - name: Zip Artifacts
      run: |
        for d in ./executables/*; do
          zip -r "$d.zip" "$d"
        done
        ls -lh ./executables/*.zip

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: ./executables/*.zip
        tag: continuous
        commit: ${{ github.sha }}
        allowUpdates: true
