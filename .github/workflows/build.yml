name: Build

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  build:
    name: Build Executables
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            build_type: 'linux'
          - os: macos-13
            build_type: 'macos'
          - os: windows-2022
            build_type: 'windows'
          - os: ubuntu-22.04-arm
            build_type: 'linux-arm64'
          - os: ubuntu-22.04
            build_type: 'alpine-musl'
          - os: ubuntu-22.04-arm
            build_type: 'alpine-musl-arm64'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install Libraries (Linux only)
      if: runner.os == 'Linux' && matrix.build_type != 'alpine-musl' && matrix.build_type != 'alpine-musl-arm64'
      run: |
        sudo apt-get update
        sudo apt-get install -y libasound2-dev \
        libxcb-shape0-dev \
        libxcb-image0-dev \
        libxkbcommon-x11-0 \
        libxcb-icccm4-dev \
        libxcb-xkb-dev \
        libxcb-render-util0-dev \
        libxcb-keysyms1-dev \
        libxcb-cursor-dev \
        libegl1-mesa \
        libegl1 \
        libqt6opengl6

    - name: Set up Python
      if: matrix.build_type != 'alpine-musl' && matrix.build_type != 'alpine-musl-arm64'
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install dependencies
      if: matrix.build_type != 'alpine-musl' && matrix.build_type != 'alpine-musl-arm64'
      run: |
        python -m pip install --upgrade pip
        python -m pip install -U "https://github.com/Nuitka/Nuitka/archive/develop.zip"
        pip install -r src/requirements.txt

    - name: Install comtypes (Windows only)
      if: runner.os == 'Windows'
      run: pip install comtypes

    - name: Build in Alpine Docker Container
      if: matrix.build_type == 'alpine-musl' || matrix.build_type == 'alpine-musl-arm64'
      run: |
        if [[ "${{ matrix.build_type }}" == "alpine-musl-arm64" ]]; then
          PLATFORM="--platform linux/arm64"
        else
          PLATFORM="--platform linux/amd64"
        fi
        
        docker run $PLATFORM -v ${{ github.workspace }}:/workspace -w /workspace alpine:latest sh -c "
          # Install build dependencies including PySide6 from Alpine packages
          apk add --no-cache python3 python3-dev py3-pip build-base git \
          linux-headers musl-dev gcc g++ cmake ninja pkgconfig \
          alsa-lib-dev patchelf \
          py3-pyside6 py3-shiboken6 py3-wheel py3-setuptools \
          fontconfig fontconfig-dev ttf-dejavu ttf-liberation \
          freetype freetype-dev harfbuzz harfbuzz-dev \
          icu-libs mesa-gl mesa-gles && \\
          
          # Create virtual environment with system site packages to access PySide6
          python3 -m venv --system-site-packages /opt/venv && \\
          source /opt/venv/bin/activate && \\
          
          # Upgrade pip and install build tools
          pip install --upgrade pip && \\
          
          # Install Nuitka
          pip install -U 'https://github.com/Nuitka/Nuitka/archive/develop.zip' && \\
          
          # Install other requirements via pip
          pip install mido requests zeroconf python-rtmidi && \\
          
          # Create output directory
          mkdir -p dist_nuitka && \\
          
          # Build with Nuitka using standalone mode and dynamically discovered dependencies
          python -m nuitka --enable-plugin=pyside6 \\
            --include-package=zeroconf \\
            --include-package=rtmidi \\
            --include-package=mido.backends.rtmidi \\
            --include-package=shiboken6 \\
            --include-package=PySide6.QtCore \\
            --include-package=PySide6.QtWidgets \\
            --include-package=PySide6.QtGui \\
            --include-package=PySide6.QtSvgWidgets \\
            --include-data-dir=src/midi_commands=midi_commands \\
            --include-data-dir=src/data=data \\
            --include-data-dir=src/images=images \\
            --include-data-dir=/usr/share/fonts=fonts \\
            --include-data-dir=/etc/fonts=etc/fonts \\
            --include-data-dir=/usr/share/fontconfig=share/fontconfig \\
            --standalone \\
            --prefer-source-code \\
            --assume-yes-for-downloads \\
            --output-dir=dist_nuitka \\
            --lto=yes \\
            'src/MiniDexed Service Utility.py' && \\
          
          # Create a single executable archive from the standalone build
          cd 'dist_nuitka/MiniDexed Service Utility.dist' && \\
          tar -czf '../../MiniDexed Service Utility.bin' * && \\
          cd ../.. && \\
          mv 'MiniDexed Service Utility.bin' dist_nuitka/ && \\
          
          # Clean up build artifacts but keep the .bin file
          rm -rf dist_nuitka/*build && \\
          rm -rf dist_nuitka/*dist
        "

    - name: Build Executable (Nuitka)
      if: matrix.build_type != 'alpine-musl' && matrix.build_type != 'alpine-musl-arm64'
      run: |
          python -m nuitka --version
          python -m pip list -v
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            python -m nuitka --assume-yes-for-downloads --output-dir=dist_nuitka --macos-create-app-bundle 'src/MiniDexed Service Utility.py'
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            python -m nuitka --assume-yes-for-downloads --output-dir=dist_nuitka --onefile --windows-console-mode=attach --include-package=comtypes.client 'src/MiniDexed Service Utility.py' 
          else
             # For Linux, use --standalone to create AppImage-compatible build
             python -m nuitka --enable-plugin=pyside6 \
               --include-package=zeroconf \
               --include-package=rtmidi \
               --include-package=mido.backends.rtmidi \
               --include-package=shiboken6 \
               --include-package=PySide6.QtCore \
               --include-package=PySide6.QtWidgets \
               --include-package=PySide6.QtGui \
               --include-package=PySide6.QtSvgWidgets \
               --include-data-dir=src/midi_commands=midi_commands \
               --include-data-dir=src/data=data \
               --include-data-dir=src/images=images \
               --standalone \
               --assume-yes-for-downloads \
               --output-dir=dist_nuitka \
               'src/MiniDexed Service Utility.py'
          fi
          rm -rf dist_nuitka/*build

      env:
          PYTHONOPTIMIZE: 2
      shell: bash   

    - name: Create AppImage (Linux only)
      if: matrix.build_type == 'linux' || matrix.build_type == 'linux-arm64'
      run: |
        # Get short SHA for version
        SHORT_SHA=$(git rev-parse --short HEAD)
        
        # Determine architecture for appimagetool download
        if [[ "${{ matrix.build_type }}" == "linux-arm64" ]]; then
          ARCH_PATTERN="appimagetool-.*-aarch64.AppImage"
        else
          ARCH_PATTERN="appimagetool-.*-x86_64.AppImage"
        fi
        
        # Download appimagetool
        wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases/expanded_assets/continuous -O - | grep "$ARCH_PATTERN" | head -n 1 | cut -d '"' -f 2)
        chmod +x appimagetool-*.AppImage
        
        # Find the standalone build directory
        STANDALONE_DIR=$(find dist_nuitka -maxdepth 1 -name "*.dist" -type d | head -n 1)
        if [ -z "$STANDALONE_DIR" ]; then
          echo "ERROR: Could not find standalone build directory"
          ls -la dist_nuitka/
          exit 1
        fi
        
        echo "Found standalone build: $STANDALONE_DIR"
        
        # Create AppDir structure and copy the entire standalone build
        mkdir -p AppDir/usr/bin
        mkdir -p AppDir/usr/share/applications
        mkdir -p AppDir/usr/share/icons/hicolor/scalable/apps
        
        # Copy all files from standalone build to AppDir/usr/bin
        cp -r "$STANDALONE_DIR"/* AppDir/usr/bin/
        
        # Find the main executable in the standalone directory
        MAIN_EXEC=$(find AppDir/usr/bin -maxdepth 1 -name "MiniDexed Service Utility*" -type f -executable | head -n 1)
        if [ -z "$MAIN_EXEC" ]; then
          echo "ERROR: Could not find main executable"
          ls -la AppDir/usr/bin/
          exit 1
        fi
        
        # Create a symlink with a simple name for the desktop file
        ln -s "$(basename "$MAIN_EXEC")" AppDir/usr/bin/minidexed-service-utility
        
        # Copy desktop file and icon
        cp minidexed-service-utility.desktop AppDir/usr/share/applications/
        cp minidexed-service-utility.svg AppDir/usr/share/icons/hicolor/scalable/apps/
        
        # Bundle dependencies
        ./appimagetool-*.AppImage -s deploy ./AppDir/usr/share/applications/*.desktop
        
        # Create AppImage with short SHA as version
        VERSION=$SHORT_SHA ./appimagetool-*.AppImage ./AppDir
        
        # Move AppImage to dist_nuitka
        if ls *.AppImage 1> /dev/null 2>&1; then
          mv *.AppImage dist_nuitka/
          echo "AppImage created successfully and moved to dist_nuitka/"
        else
          echo "WARNING: No AppImage file was created"
          ls -la
        fi
      shell: bash

    - name: Upload Nuitka Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.build_type }}-${{ runner.arch }}
        path: |
          dist_nuitka/*
        retention-days: 1

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
    - name: Download Executable
      uses: actions/download-artifact@v4
      with:
        path: ./executables/
        # merge-multiple: true

    - name: Display structure of downloaded files
      run: ls -la executables/

    - name: Prepare release files
      run: |
        mkdir -p release
        # Debug: Show the actual structure
        find executables -type f -name "*MiniDexed*" -o -name "*.exe" -o -name "*.bin" -o -name "*.AppImage"
        
        # Rename and organize files for release
        find executables -name "*MiniDexed Service Utility.exe" -exec cp {} release/MiniDexed-Service-Utility-windows \;
        find executables -name "*MiniDexed Service Utility.bin" -path "*linux-X64*" -exec cp {} release/MiniDexed-Service-Utility-linux \;
        find executables -name "*MiniDexed Service Utility.bin" -path "*linux-arm64*" -exec cp {} release/MiniDexed-Service-Utility-linux-arm64 \;
        find executables -name "*MiniDexed Service Utility" -path "*macos*" -exec cp {} release/MiniDexed-Service-Utility-macos \;
        find executables -name "*MiniDexed Service Utility.bin" -path "*alpine-musl-X64*" -exec cp {} release/MiniDexed-Service-Utility-linux-musl \;
        find executables -name "*MiniDexed Service Utility.bin" -path "*alpine-musl-arm64*" -exec cp {} release/MiniDexed-Service-Utility-linux-musl-arm64 \;
        
        # Copy AppImage files
        find executables -name "*.AppImage" -path "*linux-X64*" -exec cp {} release/ \;
        find executables -name "*.AppImage" -path "*linux-arm64*" -exec cp {} release/ \;
        
        # Make Linux/macOS binaries executable (only if they exist)
        find release -name "*linux*" -o -name "*macos*" -o -name "*.AppImage" | xargs -r chmod +x
        
        # List final release files
        ls -la release/ || echo "No files found in release directory"

    - name: Zip Artifacts
      run: |
        cd release
        for file in *; do
          if [ -f "$file" ] && [[ "$file" != *.AppImage ]]; then
            zip "$file.zip" "$file"
          fi
        done
        ls -lh *.zip 2>/dev/null || echo "No zip files created"

    - name: Upload binaries to release using uploadtool
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        UPLOADTOOL_BODY: "Automated build from commit ${{ github.sha }}\\nBuilt on ${{ github.event.head_commit.timestamp }}\\nBranch: ${{ github.ref_name }}"
      run: |
        set -e
        cd release
        ls -lh *.zip *.AppImage 2>/dev/null || ls -lh # Show what we're about to upload
        wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh

        bash upload.sh *.zip *.AppImage

